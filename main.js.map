{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/components/city/city.component.css","webpack:///./src/app/components/city/city.component.html","webpack:///./src/app/components/city/city.component.ts","webpack:///./src/app/components/search/search.component.css","webpack:///./src/app/components/search/search.component.html","webpack:///./src/app/components/search/search.component.ts","webpack:///./src/app/material.module.ts","webpack:///./src/app/services/weather.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","module.exports = \"<div class=\\\"container\\\">\\n  <mat-toolbar class=\\\"app-title\\\">\\n    <span class=\\\"text-mid\\\"> {{title}} </span>\\n  </mat-toolbar>\\n</div>\\n\\n<app-city></app-city>\\n<!-- \\n  Challenge\\n   - pass appropriate parameters to functions \\n   - pass the city details to the CityComponent    \\n  -->\\n\\n<!-- <app-search\\n(selectedCity)=\\\"getCityDetails($event)\\\">\\n</app-search> --> \\n\\n<!-- value emited: {{valueEmittedFromChildComponent}}\\n   <app-city\\n    cityDetails=\\\"cityDetails\\\">\\n</app-city> -->\\n\\n\"","import { Component, OnInit } from '@angular/core';\nimport { WeatherService } from './services/weather.service';\nimport { IWeatherData } from './models/IWeatherData.interface';\nimport{ IWeatherRawData } from './models/IWeatherRawData.interface'\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n  title = 'My Weather App';\n  cityDetails: any;\n  city: string ='city_name';\n  country:string='country_name';\n  imgUrl: 'https://www.metaweather.com/static/img/weather/lc.svg';\n\n  ngOnInit() {\n  }\n\n  constructor(\n    private weatherService: WeatherService,\n  ) {}\n\n // valueEmittedFromChildComponent: number;\n\n//   getCityDetails(woeid) {\n//     /*\n//       CHALLENGE\n//        - pass the city id to service.getCityDetails(woeid)\n//     */\n//    this.valueEmittedFromChildComponent = woeid;\n\n//    this.weatherService.getCityDetails(woeid)\n//       .subscribe(data =>{\n//         this.cityDetails=data.consolidated_weather;\n//   });\n//   this.weatherService.getCityDetails(woeid)\n//   .subscribe(data =>{\n//     this.city=data.title;\n// });\n\n// this.weatherService.getCityDetails(woeid)\n// .subscribe(data =>{\n//   this.country=data.parent.title;\n// });\n// }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\n\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MaterialModule } from './material.module';\nimport { SearchComponent } from './components/search/search.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport { CityComponent } from './components/city/city.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    SearchComponent,\n    CityComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    MaterialModule,\n    HttpClientModule,\n    FlexLayoutModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \".container {\\n    width: 960px;\\n    margin-left: auto;\\n    margin-right: auto;\\n}\\n\\n.userInfo{\\n    text-align: center;\\n    margin-left: auto;\\n    margin-right: auto;\\n}\\n\\n.container-weather {\\n    display: flex;\\n    justify-content: space-between;\\n    text-align: center;\\n}\\n\\n.weather-card {\\n    width: 200px;\\n    height: 100px;\\n}\\n\\n.cityData {\\n    background-color: #fafafa;\\n    padding: 12px;\\n    max-width: 200px;\\n    /* display: flex; */\\n}\\n\\n.cityName {\\n    margin: 0 auto 5 auto;\\n    text-align: center;\\n    display: block;\\n    font-size: 40px;\\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\\n}\\n\\n.date {\\n    padding: 5px;\\n    width: 80%;\\n    font-weight: 500;\\n    margin-right: auto;\\n    margin-left: auto;\\n    display: inline-block;\\n}\\n\\n.weatherIcon {\\n    width: 20%;\\n}\\n\\n.weather {\\n    font-weight: 600;\\n    display: block;\\n}\\n  \\n\"","module.exports = \"\\n<app-search\\n(selectedCity)=\\\"getCityDetails($event)\\\">\\n</app-search>\\n\\n<!-- \\n  CHALLENGE\\n    - display cityName in format \\\"city name, country name\\\"\\n    - define for loop to loop through weather of different days\\n    - display the weather for total 4 days (including today) \\n      var 'i' in class=\\\"cityData\\\" can be used to store index of the cityDetails.weather array\\n    - date should be formatted (eg: 2018-08-03 should be displayed as 'Aug 3, 2018' )\\n    - temperature should have \\n      - minimum 2 digits to the left of decimal\\n      - exactly 1 digit to the right of decimal\\n  -->\\n  \\n<div class=\\\"container\\\" *ngIf=\\\"cityDetails\\\">\\n  <p class=\\\"cityName\\\">{{ city }}, {{ country }}</p>\\n  <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center none\\\" fxLayoutGap=\\\"15px\\\">\\n  <div class=\\\"container-weather\\\" fxLayout=\\\"row\\\">\\n\\n    <span *ngFor=\\\"let cityDetail of cityDetails; let i=index\\\" >\\n      <mat-card class=\\\"cityData\\\" *ngIf=\\\"i<4\\\">\\n      <h3 class=\\\"date\\\">{{cityDetail.applicable_date | date: 'mediumDate'}}</h3>\\n      <mat-card>\\n        <img src=\\\"https://www.metaweather.com/static/img/weather/{{cityDetail.weather_state_abbr}}.svg\\\" class=\\\"weatherIcon\\\">\\n        <span class=\\\"weather\\\"> {{cityDetail.weather_state_name}} </span>\\n        <br>\\n        <span class=\\\"cityTemp\\\">{{cityDetail.the_temp | number: '2.1-1'}} </span>\\n      </mat-card>  \\n    </mat-card>\\n  </span>\\n\\n  </div>\\n  </div>\\n</div>\\n\\n<div class=\\\"userInfo\\\" *ngIf='!cityDetails' >\\n  <h1>Enter the city name to get the weather report.</h1>\\n</div>\"","import { Component, OnInit, Input } from '@angular/core';\nimport { IWeatherData } from '../../models/IWeatherData.interface';\nimport { WeatherService } from './../../services/weather.service';\n\n@Component({\n  selector: 'app-city',\n  templateUrl: './city.component.html',\n  styleUrls: ['./city.component.css']\n})\nexport class CityComponent implements OnInit {\n  /*\n    CHALLENGE\n     - Take the city details from app.component.html into \"cityDetails\"\n     - display the city details in the template\n  */\n title = 'My Weather App';\n  cityDetails: any;\n  city: string ='city_name';\n  country:string='country_name';\n  \n  valueEmittedFromChildComponent: number= 0;\n // cityDetails: IWeatherData;\n  i: number;\n  imgUrl: 'https://www.metaweather.com/static/img/weather/.svg';\n  constructor( private weatherService: WeatherService) { }\n\n  ngOnInit() {\n    \n    // this.i=1;\n    // this.cityDetails={\n    //   city: 'chennai',\n    //   country: 'india',\n    //   weather: [\n    //     {\n    //       date: 'Aug 3, 2018',\n    //       temperature: 31.1,\n    //       weather_name: 'sunny',\n    //       weather_image: this.imgUrl,\n    //     }\n    //   ]\n    // }\n    // if(this.cityDetails.weather[0].temperature==2){\n    //   this.cityDetails.weather[0].temperature=2.0\n    // }\n  }\n\n  getCityDetails(woeid) {\n    /*\n      CHALLENGE\n       - pass the city id to service.getCityDetails(woeid)\n    */\n  // this.valueEmittedFromChildComponent = woeid;\n\n   this.weatherService.getCityDetails(woeid)\n      .subscribe(data =>{\n        this.cityDetails=data.consolidated_weather;\n  });\n  this.weatherService.getCityDetails(woeid)\n  .subscribe(data =>{\n    this.city=data.title;\n});\n\nthis.weatherService.getCityDetails(woeid)\n.subscribe(data =>{\n  this.country=data.parent.title;\n});\n\nthis.valueEmittedFromChildComponent = woeid;\n}\n\n\n}\n","module.exports = \"mat-card mat-list-item mat-list-item {\\n  cursor: pointer,\\n}\\n\\n.searchOutput {\\n  width: 400px;\\n  margin-top: -30px;\\n  margin-left: auto;\\n  margin-right: auto;\\n  overflow-x: hidden;\\n  overflow-y: auto;\\n  max-height: 200px;\\n}\\n\\n.mat-card {\\n  padding: 0px !important;\\n}\\n\\n.searchError {\\n  background-color: #fafafa;\\n}\"","module.exports = \"<p>\\n  <mat-form-field>\\n    <mat-label>Search city</mat-label>\\n    <mat-icon matSuffix>search</mat-icon>\\n\\n    <!-- Challenge #searchInput -->\\n    <input\\n        #searchInput\\n        matInput\\n        placeholder=\\\"paris, london...\\\"         \\n        (keyup)=\\\"search(searchInput.value)\\\" \\n        >\\n  </mat-form-field>\\n</p>\\n<!-- <p>location: {{searchInput.value}}</p> -->\\n\\n<div class=\\\"searchOutput\\\">\\n    <mat-card *ngIf=\\\"searchResults\\\">\\n        \\n        <!-- If input field has some value and the result from service is an empty array show sorry message else display list -->\\n        <mat-list role=\\\"list\\\" *ngIf=\\\"searchResults.length===0 && searchInput.value\\\" class=\\\"searchError\\\">\\n            <mat-list-item  role=\\\"listitem\\\">City not found: {{searchInput.value}} &nbsp; &nbsp;&nbsp;\\n                <mat-icon matSuffix>sentiment_very_dissatisfied</mat-icon>\\n                <br>                \\n            </mat-list-item>\\n        </mat-list>\\n        <!-- Challenge .searchItem\\n              - complete for loop\\n              - send proper parameters to function on click event\\n        -->\\n        <mat-list role=\\\"list\\\" *ngIf=\\\"searchResults.length\\\">\\n            <mat-list-item\\n                role=\\\"listitem\\\"\\n                *ngFor=\\\"let searchResult of searchResults\\\"\\n                (click)=\\\"selectedLocation(searchResult.woeid)\\\"\\n                class=\\\"searchItem\\\">                \\n                {{searchResult.title}}\\n                <mat-divider></mat-divider>\\n            </mat-list-item>\\n        </mat-list>\\n    </mat-card>\\n</div>\\n\\n\"","import { WeatherService } from './../../services/weather.service';\nimport { Component, OnInit, ViewChild, Output, EventEmitter } from '@angular/core';\nimport { ISearchResult, IWeatherData } from '../../models/IWeatherData.interface';\n\n@Component({\n  selector: 'app-search',\n  templateUrl: './search.component.html',\n  styleUrls: ['./search.component.css']\n})\nexport class SearchComponent implements OnInit {\n\n    @ViewChild('searchInput') searchInput: string;\n    searchResults: ISearchResult[];\n    @Output() \n    selectedCity: EventEmitter<number> = new EventEmitter<number>();\n\n\n    cityDetails: IWeatherData;\n\n    constructor(\n        private weatherService: WeatherService,\n    ) { }\n    ngOnInit() {\n    }\n\n    search(term) {\n        /*\n            CHALLENGE\n                - if user has typed something in the input field,\n                  call weatherService.searchLocation() with the searched term\n                  and assign the results to searchResults array\n                - if input field is empty, clear the searResults array\n        */\n       if(term==''){\n            this.searchResults=null;\n       } \n       else{\n       this.weatherService.searchLocation(term)\n        .subscribe(data=>{\n            this.searchResults=data\n        });\n    }\n\n    }\n\n    selectedLocation(woeid) {\n        /*\n            CHALLENGE\n              After user clicked on a city name from the search results, this function should be called.\n              This function should perform the following actions\n              - make the input field empty\n              - clear all the results\n              - send the cityid (woeid) to the parent component (AppComponent)\n        */    \n\n         this.searchResults=null;\n         this.searchInput=null;\n         this.selectedCity.emit(woeid);\n         \n        }\n       // this.selectedCity.emit(cityDetails.wo);\n     }\n       \n    \n","import {\n  MatButtonModule,\n  MatToolbarModule,\n  MatIconModule,\n  MatCardModule,\n  MatFormFieldModule,\n  MatInputModule,\n  MatListModule,\n  MatDividerModule\n} from '@angular/material';\nimport { NgModule } from '@angular/core';\n\n@NgModule({\n  imports: [\n    MatButtonModule,\n    MatToolbarModule,\n    MatIconModule,\n    MatCardModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatListModule,\n    MatDividerModule\n  ],\n  exports: [\n    MatButtonModule,\n    MatToolbarModule,\n    MatIconModule,\n    MatCardModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatListModule,\n    MatDividerModule\n  ],\n})\nexport class MaterialModule {}\n","import { ICityWeather } from './../models/IWeatherData.interface';\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { IWeatherRawData } from '../models/IWeatherRawData.interface';\nimport { ISearchResult, IWeatherData } from '../models/IWeatherData.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WeatherService {\n\n  constructor(\n    private http: HttpClient,\n  ) { }\n\n  baseUrl = 'https://cors-anywhere.herokuapp.com/https://www.metaweather.com';\n  iWeatherData: IWeatherData;\n  iWeatherRawData: IWeatherRawData;\n\n  searchLocation(term): Observable<ISearchResult[]> {\n    /*\n      CHALLANGE\n       - get list of cities based on the searched string\n       sample url: baseUrl/api/location/search/?query=paris\n    */\n   //return this.http.get<any>(this.baseUrl+\"/\"+\"api/location/search/?query=+\"+term);\n\n    return this.http.get<ISearchResult[]>(this.baseUrl+'/api/location/search/?query='+term);\n \n  }\n\n  getCityDetails(woeid): Observable<IWeatherRawData> {\n    /*\n      woeid is the city id(number).\n      you can use below sample url to fetch the city weather details\n      sample url : baseUrl/api/location/111111   https://www.metaweather.com/api/location/28743736\n    */\n    /*\n      CHALLENGE\n       - fetch the city weather data\n       - transform the received data to required \"IWeatherData\" format using transformRawData() func\n    */\n   return this.http.get<IWeatherRawData>(this.baseUrl+'/api/location/'+woeid)\n  //       .subscribe(data=>{\n  //         let response=this.transformRawData(data);\n  //  });\n  //  this.iWeatherRawData={\n  //    consolidated_weather: [\n  //         {\n  //             weather_state_name: 'state',\n  //             weather_state_abbr: 'cloudy',\n  //             applicable_date: '2018-08-03',\n  //             the_temp: 29,\n  //         }\n  //     ],\n  //     parent: {\n  //         title: 'country',\n  //     },\n  //     title: 'title',\n  //  }\n  // this.iWeatherData=this.transformRawData(this.iWeatherRawData);\n  //  return of(this.iWeatherData);\n  }\n\n  transformRawData(rawData: IWeatherRawData) {\n    const transformedWeather: Array<ICityWeather> = [];\n\n    rawData.consolidated_weather.forEach(function(obj) {\n      const date = '';\n      const temperature = 0;\n      const weather_name = '';\n      const weather_image = `https://www.metaweather.com/static/img/weather/.svg`;\n\n      transformedWeather.push({date, temperature, weather_image, weather_name } as ICityWeather);\n    });\n\n    return {\n      city: rawData.title,\n      country: rawData.parent.title,\n      weather: [],\n    };\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}